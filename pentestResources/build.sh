#!/usr/bin/env bash
set -e

#
# Note: It is assumed that the build script will be run as the root user.
#

echo "[+] Building VulnWebApp"
echo "[+] OS: Ubuntu 22.04 LTS"
echo "[+] Author: Vixx"
echo "[+] Date: 2022-05-19"
echo "[+] Point Value: 5"

echo "[+] Installing utilities"
apt install -y net-tools vim open-vm-tools

echo "[+] Configuring first vector"
echo "[+] Installing Apache and PHP and sendmail"
apt install -y apache2 libapache2-mod-php php-pgsql php-mysqli php-dom php-ds sendmail

echo "[+] Installing postgres and mysql servers"
apt install -y postgresql postgresql-contrib default-mysql-server

echo "[+] Installing SSH Server"
apt install -y openssh-server

echo "[+] Enabling allow_url_fopen and allow_url_include in php.ini"
sed 's/^\(allow_url_fopen\).*/\1 = On/' -i $(find / -name php.ini | grep apache2)
sed 's/^\(allow_url_include\).*/\1 = On/' -i $(find / -name php.ini | grep apache2)

echo "[+] Creating vulnerable website"
rm -rf /var/www/html/index.html
tar -xvf VulnWebApp.tar.xz --directory /var/www/html
echo '<?php header("location: VulnWebApp/index.php"); ?>' > /var/www/html/index.php

echo "[+] Fixing Into Outfile for MYSQL"
echo "[+] Setting secure_file_priv global variable"
echo '[mysqld]' >> /etc/mysql/my.cnf
echo 'secure_file_priv = ""' >> /etc/mysql/my.cnf

echo "[+] Restarting mysql service"
systemctl restart mysql.service

echo "[+] Enabling SSH"
systemctl enable ssh
systemctl start ssh

echo "[+] Enabling Apache"
systemctl enable apache2
systemctl start apache2

echo "[+] Disabling sendmail service"
systemctl stop sendmail
systemctl disable sendmail

echo "[+] setting up mysql and postgres databases"
su - postgres -c "psql -f /var/www/html/VulnWebApp/setup/setupDatabase.psql"
mysql -uroot < /var/www/html/VulnWebApp/setup/setupDatabase.sql

echo "[+] Configuring firewall"
echo "[+] Installing iptables"
echo "iptables-persistent iptables-persistent/autosave_v4 boolean false" | debconf-set-selections
echo "iptables-persistent iptables-persistent/autosave_v6 boolean false" | debconf-set-selections
apt install -y iptables-persistent

#
# Note: Unless specifically required as part of the exploitation path, please
#       ensure that inbound ICMP and SSH on port 22 are permitted.
#

echo "[+] Applying inbound firewall rules"
iptables -I INPUT 1 -i lo -j ACCEPT
iptables -A INPUT -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A INPUT -j DROP

#
# Note: Unless specifically required as part of the exploitation path, please
#       ensure that outbound ICMP, DNS (TCP & UDP) on port 53 and SSH on port 22
#       are permitted.
#

echo "[+] Applying outbound firewall rules"
iptables -A OUTPUT -o lo -j ACCEPT
iptables -A OUTPUT -p tcp --sport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p udp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --sport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --sport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
iptables -A OUTPUT -j DROP

echo "[+] Saving firewall rules"
service netfilter-persistent save

echo "[+] Disabling IPv6"
echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=""/GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"/' /etc/default/grub
sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="ipv6.disable=1"/' /etc/default/grub
update-grub

echo "[+] Configuring hostname"
hostnamectl set-hostname vixx
cat << EOF > /etc/hosts
127.0.0.1 localhost
127.0.0.1 vixx
EOF

echo "[+] Creating users if they don't already exist"
id -u vixx &>/dev/null || useradd -m vixx -s /bin/bash

echo "[+] Disabling history files"
ln -sf /dev/null /root/.bash_history
ln -sf /dev/null /home/vixx/.bash_history

#
# Note: Unless specifically required as part of the exploitation path, please
#       ensure that root login via SSH is permitted.
#

echo "[+] Enabling root SSH login"
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

echo "[+] Setting passwords"
echo "root:CowabungaItsTimeToSurf991" | chpasswd
echo "vixx:DebugSMTP" | chpasswd

echo "[+] Give the user vixx access to SMTP debugging"
echo 'vixx ALL=(root) /usr/bin/python3 -m smtpd -n -c DebuggingServer 0.0.0.0\:25' >> /etc/sudoers

echo "[+] Dropping flags"
echo "ca742c7ad27d517527f49531c02f76b8" > /root/proof.txt
echo "9f1642b69b2a23aca3c5863e3f1ffd92" > /var/www/local.txt
chmod 0600 /root/proof.txt
chmod 0644 /var/www/local.txt
chmod 777 /var/www/html/VulnWebApp/images 
chown -R www-data:www-data /var/www/ 
usermod -a -G mysql www-data
#
# Note: Please ensure that any artifacts and log files created by the build script or
#       while running the build script is removed afterwards.
#

echo "[+] Cleaning up"
rm -rf /root/build.sh
rm -rf /root/VulnWebApp.tar.xz
rm -rf /root/.cache
rm -rf /root/.viminfo
rm -rf /home/vixx/.sudo_as_admin_successful
rm -rf /home/vixx/.cache
rm -rf /home/vixx/.viminfo
find /var/log -type f -exec sh -c "cat /dev/null > {}" \;

echo "[+] Restarting Services"
systemctl restart mysql.service
systemctl restart postgresql.service
systemctl restart apache2

